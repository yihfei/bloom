generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model CoffeeBean {
    id               Int      @id @default(autoincrement())
    name             String
    quantity         Float
    roastLevel       String
    origin           String
    variety          String
    processingMethod String
    flavourNotes     String[] // or String[] if you want array later
    roastDate        DateTime
    purchasedFrom    String
    price            Float
    brews            Brew[]
}

model Grinder {
    id    Int    @id @default(autoincrement())
    name  String
    price Float
    brews Brew[]
}

model Brew {
    id           Int        @id @default(autoincrement())
    coffeeBean   CoffeeBean? @relation(fields: [coffeeBeanId], references: [id], onDelete: SetNull)
    coffeeBeanId Int?
    coffeeAmount Float
    waterAmount  Float
    grinderId    Int? // Make nullable
    grinder      Grinder?   @relation(fields: [grinderId], references: [id], onDelete: SetNull)
    grindSetting String
    brewMethod   String
    brewTime     Int
    notes        String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

// Authentication models for NextAuth.js prisma
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}